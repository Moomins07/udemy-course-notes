### Scoping

How our program's variables are organised and accessed. Scoping asks the questions such as:
"Where do variables live?" or "Where can we access a certain variable and where not?"

### Lexical Scoping

Scoping is controlled by placement of functions and blocks in the code.
For example, a function that is written inside of another function has access to the variables of the parent function. Scoping is influenced by where we write our functions and code blocks.

### Scope

Space or environment in which a certain variable is declared (variable environment in case of functions). There is global scope, function scope and block scope.

### Scope of a variable

Region of our code where a certain variable can be accessed.

### Global Scope

> Outside of any funcitons or block.
> Variables declared in global scope are accessible everywhere. (Top-level code)

### Function Scope

> Each and every function creates a scope and the variables declared inside that function scope are only accessible inside that function.
> Also called a 'local scope' as opposed to a 'global scope'.

### Block Scope (ES6)

> Variables are accessible only inside block. (block scoped)
> HOWEVER, this only applies to let and const variables.
> Functions are also block scoped (only in strict mode). Functions declared inside a block are only accessible inside that block.
> By block, we mean everything inside of curly braces. E.g. if statement or for loop {}

### The Scope Chain

Every scope always has access to all the variables from all it's outer scopes (parent scopes).

E.g. If we have a function within a function, first() and second().

Our second() function inside of the first() function will have access to variables inside of our first() function. The first() function has access to variables in the global scope.

Global scope > first() > second()

If one scope needs to use a certain variable but cannot find it in the current scope, it will look up in the scope chain to see if it can find the variable in a parent scope. If it can, it will use that varaible.

This process is called variable lookup in scope chain.

Parent scopes will never have access to child scopes variables.

var is function scoped, NOT block-scoped.
let and const are block-scoped.

Variables declared in the global scope are called 'Global variables'.

Due to lexical scoping (where the scopes are placed), the the second() function would not have access to an if block of code in the first() function. This is because both the second() function and that if statement are child scopes of the firsrt() function. Aka sibling scopes.

### Scope Chain vs. Call Stack

Scope chain: Order in which functions are written in the code.
(The scope chain has nothing to do with the order of the execution context in the call stack.)

## Summary

> Scoping asks the questions such as:
> "Where do variables live?" or "Where can we access a certain variable and where not?"

> There are 3 types of scope in JavaScript: the global scope, scopes defined by functions, and scopes defined by blocks.

> Only let and const are block-scoped. Variables declared with var end up in the closest function scope.

> In JavaScript, we have lexical scoping, so the rules of where we can access variables are based on exactly where in the code functions and blocks are written.

> Every scope always has access to all the variables from all its outer scopes. This is the scope chain!

> When a variable is not in the current scope, the engine looks up in the scope chain until it finds the variable it's looking for. This is called variable lookup.

> The scope chain is a one way street: a scope will never, ever have access to the variables of an inner scope.

> The scope chain in a certain scope is equal to adding together all the variable environments of all the parent scopes.

> The scope chain has nothing to do with the order in which functions were called. It does not affect the scope chain at all!
